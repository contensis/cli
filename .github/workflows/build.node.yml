name: Node.js CI

on:
  workflow_call:

permissions:
  contents: write
  pull-requests: write

jobs:
  build:
    name: Build, test and publish
    runs-on: ubuntu-22.04
    # if: startsWith(github.event.head_commit.message, 'docs:') != true && contains(github.ref_name, github.event.head_commit.message) != true

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install dependencies, build and package
        if: contains(github.event.head_commit.message, '[nobuild]') != true
        run: |
          yarn run bootstrap
          yarn run build
          cd packages/contensis-cli
          npm pack

      # - name: Test install and run some cli commands
      #   if: contains(github.event.head_commit.message, '[nobuild]') != true
      #   env:
      #     CMSG: ${{ toJSON(github.event.head_commit.message) }}
      #   run: |
      #     cd packages/contensis-cli
      #     APP_VERSION=$(node --eval="process.stdout.write(require('./package.json').version)")
      #     npm i -g contensis-cli-$APP_VERSION.tgz
      #     # contensis-cli push block cli-ci-block ghcr.io/${{ github.repository }}/${{ github.ref_name }}/app:latest -r -cmsg "${CMSG}" -cdt ${{ github.event.head_commit.timestamp }} -author ${{ github.event.head_commit.author.email }} -committer ${{ github.event.head_commit.committer.email }} -a zenhub-dev -p contensis -id ${{ secrets.CONTENSIS_CLIENT_ID }} -s ${{ secrets.CONTENSIS_SHARED_SECRET }}
      #     # contensis connect zenhub-dev -id ${{ secrets.CONTENSIS_CLIENT_ID }} -s ${{ secrets.CONTENSIS_SHARED_SECRET }}
      #     # contensis connect zenhub-dev -p migratortron -id ${{ secrets.CONTENSIS_CLIENT_ID }} -s ${{ secrets.CONTENSIS_SHARED_SECRET }}
      #     # contensis get entries
      #     # contensis-cli get entries -q "externalURL EXISTS" -a trial-006 -p leif2 -id e4376db2-ed3e-49d3-a799-a6ec733a3611 -s a8590f6b4630404186b72fea198d3c12-c6f1f565eb86428ea0170e1b4b8a4b7f-de88eb42e46c4d548a8c36f490f34866
      #     # contensis-cli connect trial-006
      #     # contensis-cli login zengenti 123456

      - uses: google-github-actions/release-please-action@v4
        id: release
        with:
          token: ${{secrets.RELEASE_PLEASE_GITHUB_TOKEN}}
          target-branch: main

      - name: Check release output
        id: check
        run: |
          echo "releases_created=${{ steps.release.outputs.releases_created  }}" >> $GITHUB_OUTPUT
          echo "paths_released=${{ steps.release.outputs.paths_released  }}" >> $GITHUB_OUTPUT
          echo "release_tag=${{ steps.release.outputs.contensis-cli--release_created  }}" >> $GITHUB_OUTPUT
          echo "npm_tag=${{ steps.release.outputs.releases_created != 'true' && 'prerelease' || 'latest' }}" >> $GITHUB_OUTPUT

      - name: Increment prerelease package version and build package
        if: steps.release.outputs.releases_created != 'true' && !contains(github.event.head_commit.message, '[nobuild]') && !contains(github.event.head_commit.message, '[nopublish]')
        run: |
          cd packages/contensis-cli
          npm version prerelease --preid=beta --no-git-tag-version
          npm run build
          APP_VERSION=$(node --eval="process.stdout.write(require('./package.json').version)")
          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV

      - name: Push prerelease version increment to GIT
        if: steps.release.outputs.releases_created != 'true' && !contains(github.event.head_commit.message, '[nobuild]') && !contains(github.event.head_commit.message, '[nopublish]')
        run: |
          git config user.email "github@zengenti.com"
          git config user.name "$GITHUB_ACTOR"
          git add packages/contensis-cli/.
          git commit -m "ci: bumps prerelease version to ${{ env.APP_VERSION }} [skip ci]"
          git push
        env:
          # The secret is passed automatically. Nothing to configure.
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish prerelease with ${{ steps.check.outputs.npm_tag }} tag
        if: steps.release.outputs.releases_created != 'true' && !contains(github.event.head_commit.message, '[nobuild]') && !contains(github.event.head_commit.message, '[nopublish]')
        run: |
          npm config set //registry.npmjs.org/:_authToken ${NPM_TOKEN}
          npm publish --tag ${{ steps.check.outputs.npm_tag }} --ignore-scripts --workspace contensis-cli
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
