name: Docker CI

on:
  workflow_call:

env:
  REGISTRY: ghcr.io
  APP_IMAGE: ghcr.io/${{ github.repository }}/${{ github.ref_name }}/app

jobs:
  build:
    name: Build image and push
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Log into container registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image and push to ${{ env.APP_IMAGE }}:latest
        id: build
        env:
          BUILDER_BASE: node:18-alpine
          APP_BASE: node:18-alpine
          BUILDER_IMAGE: ${{ env.APP_IMAGE }}:builder
          BUILD_IMAGE: ${{ env.APP_IMAGE }}:build-${{ github.run_number }}
          LATEST_IMAGE: ${{ env.APP_IMAGE }}:latest
        run: |
          echo "Pulling images to use for build cache: $BUILDER_IMAGE $LATEST_IMAGE"
          echo "{\"commitRef\":\"${{ github.sha }}\",\"pipelineIID\":\"${{ github.run_id }}\",\"pipelineUrl\":\"${{ github.event.repository.html_url }}/actions/runs/${{ github.run_id }}\",\"buildNo\":\"${{ github.run_number }}\",\"branchName\":\"${{ github.ref_name }}\",\"registryImage\":\"${{ env.APP_IMAGE }}\"}" > version.json
          if [ -z "$(docker pull $BUILDER_IMAGE || echo "")" ]; then BUILDER_IMAGE_ARG=$BUILDER_IMAGE; echo "Builder image exists: $BUILDER_IMAGE_ARG"; fi
          if [[ "$BUILDER_IMAGE_ARG" != "" && -z "$(docker pull $LATEST_IMAGE || echo "")" ]]; then APP_IMAGE_ARG=$LATEST_IMAGE; echo "App image exists: $APP_IMAGE_ARG"; fi
          echo "Using build args: \$BUILDER_IMAGE_ARG ${BUILDER_IMAGE_ARG:=$BUILDER_BASE} \$APP_IMAGE_ARG ${APP_IMAGE_ARG:=$APP_BASE}"
          docker build -t $BUILDER_IMAGE --cache-from $BUILDER_IMAGE --build-arg builder_image=${BUILDER_IMAGE_ARG:=$BUILDER_BASE} --target prepare -f Dockerfile .
          docker build -t $LATEST_IMAGE -t $BUILD_IMAGE --cache-from $LATEST_IMAGE --build-arg app_image=${APP_IMAGE_ARG:=$APP_BASE} --build-arg builder_image=$BUILDER_IMAGE -f Dockerfile .
          docker push --all-tags ${{ env.APP_IMAGE }}
          echo "image-uri=$BUILD_IMAGE" >> $GITHUB_OUTPUT

      - name: Push block to Contensis (Test `contensis/block-push` Action)
        id: push-block
        # uses: ./.github/actions/block-push
        uses: contensis/block-push@v1
        with:
          block-id: node-cli-ci-block
          auto-release: false
          image-uri: ${{ steps.build.outputs.image-uri }}
          alias: zenhub-dev
          project-id: contensis
          client-id: ${{ secrets.CONTENSIS_CLIENT_ID }}
          shared-secret: ${{ secrets.CONTENSIS_SHARED_SECRET }}
          tag-repo: true
          git-token: ${{ github.token }}
          cli-version: latest

      - name: Get entries from Contensis (Test `contensis/cli-action`)
        # uses: ./.github/actions/cli-action
        uses: contensis/cli-action@v1
        with:
          cli-version: latest
          command: get entries
          alias: zenhub-dev
          project-id: migratortron
          client-id: ${{ secrets.CONTENSIS_CLIENT_ID }}
          shared-secret: ${{ secrets.CONTENSIS_SHARED_SECRET }}
