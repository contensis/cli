name: Package executables CI

on:
  workflow_call:
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  APP_IMAGE: ghcr.io/${{ github.repository }}/${{ github.ref_name }}/app

jobs:
  build:
    name: ${{ matrix.friendlyName }}
    # env:
    #   CC: "clang"
    #   CXX: "clang++"
    #   npm_config_clang: "1"

    strategy:
      matrix:
        node-version: [18.x]
        os: [ubuntu-20.04, windows-2019, macos-latest]
        include:
          - os: ubuntu-20.04
            friendlyName: Ubuntu
            fileName: linux
          - os: windows-2019
            friendlyName: Windows
            fileName: win
          - os: macos-latest
            friendlyName: macOS
            fileName: mac

    runs-on: ${{ matrix.os }}
    continue-on-error: true

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install additional dependencies
        if: ${{ matrix.os == 'ubuntu-20.04' }}
        run: |
          sudo apt-get -qq -y install gnome-keyring \
                               libsecret-1-dev \
                               dbus-x11 \
                               python3-dev

      - name: Setup os specific environment
        run: |
          yarn cache clean --mirror
          yarn run bootstrap
          yarn run build

      - run: |
          yarn run build
          yarn run build:exe
        name: Build module and executable from native sources

      - run: |
          echo "Install keyring..."
          pip3 install --upgrade pip
          pip3 install keyring
          echo "Prepare D-Bus session..."
          export $(dbus-launch)
          dbus-launch
          gnome-keyring-daemon --start --daemonize --components=secrets
          echo 'neil' | gnome-keyring-daemon -r -d --unlock
          echo "Create a test key using script..."
          python -c "import keyring;keyring.set_password('system', 'login', 'pwd');"
        if: ${{ matrix.os == 'ubuntu-20.04' }}
        name: Prepare system keyring (Linux)

      - name: Get app version (Windows)
        if: ${{ matrix.os == 'windows-2019' }}
        run: |
          cd bin
          dir
          .\contensis-cli --version
          $APP_VERSION=.\contensis-cli --version

      - name: Get app version and make file executable (Linux/macOS)
        if: ${{ matrix.os != 'windows-2019' }}
        run: |
          cd bin && ls -lah
          chmod +x contensis-cli
          echo "APP_VERSION=$(./contensis-cli --version)" >> $GITHUB_ENV

      - name: Run some tests with executable
        env:
          CONTAINER_CONTEXT: 'true'
        run: |
          cd bin
          ./contensis-cli connect zenhub-dev -id ${{ secrets.CONTENSIS_CLIENT_ID }} -s ${{ secrets.CONTENSIS_SHARED_SECRET }}
          ./contensis-cli connect zenhub-dev -p migratortron -id ${{ secrets.CONTENSIS_CLIENT_ID }} -s ${{ secrets.CONTENSIS_SHARED_SECRET }}
          ./contensis-cli get entries

      - name: Archive packaged artifacts
        uses: actions/upload-artifact@v3
        with:
          name: contensis-cli-${{ env.APP_VERSION }}-${{ matrix.fileName }}
          path: bin/contensis-cli*
