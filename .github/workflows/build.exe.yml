name: Package executables CI

on:
  workflow_call:
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  APP_IMAGE: ghcr.io/${{ github.repository }}/${{ github.ref_name }}/app

jobs:

jobs:
  build:
    name: ${{ matrix.friendlyName }}
    # env:
    #   CC: "clang"
    #   CXX: "clang++"
    #   npm_config_clang: "1"

    strategy:
      matrix:
        node-version: [18.x]
        os: [ubuntu-20.04, windows-2019, macos-latest]
        include:
          - os: ubuntu-20.04
            friendlyName: Ubuntu
          - os: windows-2019
            friendlyName: Windows
          - os: macos-latest
            friendlyName: macOS

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}

    - name: Install additional dependencies
      if: ${{ matrix.os == 'ubuntu-20.04' }}
      run: |
        sudo apt-get install gnome-keyring \
                             libsecret-1-dev \
                             dbus-x11 \
                             python3-dev

    # This step can be removed as soon as official Windows arm64 builds are published:
    # https://github.com/nodejs/build/issues/2450#issuecomment-705853342
    - name: Install Windows arm64 node.lib
      if: ${{ matrix.os == 'windows-2019' }}
      run: |
        $NodeVersion = (node --version) -replace '^.'
        $NodeFallbackVersion = "15.8.0"
        & .\script\download-node-lib-win-arm64.ps1 $NodeVersion $NodeFallbackVersion

    - name: Setup os specific environment
      run: |
          yarn cache clean --mirror
          yarn run bootstrap:ci
          yarn run build

    - run: | 
          yarn run build
          yarn run build:exe
      name: Build module and executable from native sources

    - run: |
        echo "Install keyring..."
        pip3 install --upgrade pip
        pip3 install keyring
        echo "Prepare D-Bus session..."
        eval $(dbus-launch --sh-syntax);
        eval $(echo 'somecredstorepass' | gnome-keyring-daemon --unlock)
        echo "Create a test key using script..."
        python -c "import keyring;keyring.set_password('system', 'login', 'pwd');"
      if: ${{ matrix.os == 'ubuntu-20.04' }}
      name: Run tests (Linux)

    - name: Run tests (Windows/macOS)
      run: |
        cd bin && ls -lah
        contensis-cli connect zenhub-dev -id ${{ secrets.CONTENSIS_CLIENT_ID }} -s ${{ secrets.CONTENSIS_SHARED_SECRET }}
        contensis-cli connect zenhub-dev -p migratortron -id ${{ secrets.CONTENSIS_CLIENT_ID }} -s ${{ secrets.CONTENSIS_SHARED_SECRET }}
        contensis-cli get entries

    - run: |
        mkdir -p prebuilds && chmod 777 prebuilds
        docker build -t node-keytar/i386 docker/i386
        docker run --rm -v ${PWD}:/project node-keytar/i386 /bin/bash -c "cd /project && npm run prebuild-napi-ia32 && rm -rf build"
        docker build -t node-keytar/arm64-cross-compile docker/arm64-cross-compile
        docker run --rm -v ${PWD}:/project node-keytar/arm64-cross-compile /bin/bash -c "cd /project && npm run prebuild-napi-arm64 && rm -rf build"
        docker build -t node-keytar/armv7l-cross-compile docker/armv7l-cross-compile
        docker run --rm -v ${PWD}:/project node-keytar/armv7l-cross-compile /bin/bash -c "cd /project && npm run prebuild-napi-armv7l"
      if: ${{ matrix.os == 'ubuntu-20.04' }}
      name: Prebuild (Linux x86 + ARM64 + ARMV7L)

    - run: |
        ls -lah /
      name: List builds

    - name: Upload prebuilds to GitHub
      run: npm run upload
      if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
      env:
        GITHUB_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
